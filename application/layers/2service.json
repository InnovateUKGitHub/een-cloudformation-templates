{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Layer 2 resources, Subnetx2 & ELB",
    "Parameters": {
        "VpcId": {
            "Type": "String",
            "Description": "The ID of the VPC",
            "Default": "vpc-30297455"
        },
        "vpcCidrPrefix": {
            "Type": "String",
            "Description": "The network part of the vpcCidrBlock. e.g. 10.10.",
            "Default": ""
        },
        "PrivateHostedZoneID": {
            "Type": "String",
            "Description": "The Route53 private hosted zone id",
            "Default": "Z2CP9ZZERPS5ZE"
        },
        "ProjectName": {
            "Type": "String",
            "Description": "The project name to be used",
            "Default": "een"
        },
        "EnvironmentName": {
            "Type": "String",
            "Description": "The environment name to be used",
            "Default": "production"
        },
        "ApplicationEnv": {
            "Type": "String",
            "Description": "The APPLICATION_ENV to be used",
            "Default": "production_een_aws"
        },
        "EC2KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Default": "ben.poole@bmbp"
        },
        "SSLServerCertificateName": {
            "Type": "String",
            "Description": "'SSLServerCertificateName property of a certificate previously uploaded via AIM in console or cli api (lookup 'SSLServerCertificateName' using 'aws iam list-server-certificates')",
            "Default": "wildcard.een.co.uk"
        },
        "NotificationEMail": {
            "Description": "EMail address to notify if there are any scaling operations",
            "Default": "een@aerian.com",
            "Type": "String",
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "must be a valid email address."
        },
        "LayerName": {
            "Type": "String",
            "Description": "The name to be used for the first layer",
            "Default": "layer2"
        },
        "Subnet1CidrBlock": {
            "Type": "String",
            "Description": "The subnet CidrBlock to cover access to all AZ subnets",
            "Default": "2.0/24"
        },
        "Subnet1aCidrBlock": {
            "Type": "String",
            "Description": "The subnet CidrBlock for AZ a",
            "Default": "2.0/26"
        },
        "Subnet1bCidrBlock": {
            "Type": "String",
            "Description": "The subnet CidrBlock for AZ b",
            "Default": "2.64/26"
        },
        "Subnet1IngressCidrBlock1": {
            "Type": "String",
            "Description": "The ingress CidrBlock",
            "Default": "1.0/24"
        },
        "Subnet1NatGatewayAId": {
            "Type": "String",
            "Description": "The ID of the NAT Gateway in AZ A. (both A and B are required). Triggers NAT Gateway Route creation.",
            "Default": "false"
        },
        "Subnet1NatGatewayBId": {
            "Type": "String",
            "Description": "The ID of the NAT Gateway in AZ B. (both A and B are required). Triggers NAT GatewayRoute creation.",
            "Default": "false"
        },
        "Subnet1EC2InstanceAmi": {
            "Description": "AMI to use for Layer 2 EC2 instances (LAMP consumer)",
            "Type": "String",
            "Default": "ami-24e86457"
        },
        "Subnet1EC2InstanceType": {
            "Description": "Type of EC2 instance to launch",
            "Type": "String",
            "Default": "m1.medium"
        },
        "Subnet1EC2AutoScaleGroupSizeMin": {
            "Default": "1",
            "Description": "The minimum size the EC2 AutoScale group will scale down to.",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "5",
            "ConstraintDescription": "must be between 1 and 5."
        },
        "Subnet1EC2AutoScaleGroupSizeMax": {
            "Default": "1",
            "Description": "The maximum size the EC2 AutoScale group can scale up to.",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "20",
            "ConstraintDescription": "must be between 1 and 20."
        },
        "Subnet1EC2AutoScaleNotificationTopicArn": {
            "Description": "Subnet1EC2AutoScaleNotificationTopicArn",
            "Type": "String",
            "Default": "arn:aws:sns:eu-west-1:853139206567:een-integration-stack-resources-AutoScaleNotificationTopic-N87RNMP39SRY"
        },
        "S3BucketLoggingName": {
            "Description": "Name of logging S3 bucket",
            "Type": "String",
            "Default": "logging-production-een"
        },
        "ManagementVPCPeeringConnectionId": {
            "Type": "String",
            "Description": "The id of the ManagementVPCPeeringConnection",
            "Default": "pcx-96ff2bff"
        },
        "AuthenticationVPCPeeringConnectionId": {
            "Type": "String",
            "Description": "The id of the AuthenticationVPCPeeringConnection",
            "Default": ""
        },
        "AuthenticationVPCPeeringConnectionCidrBlock": {
            "Type": "String",
            "Description": "The Cidr block of the AuthenticationVPCPeeringConnection",
            "Default": ""
        },
        "EC2SecurityGroupManagementVpcId": {
            "Type": "String",
            "Description": "The ID of the EC2 security groups which grants access from the management VPC."
        },
        "EC2InstancePort": {
            "Type": "String",
            "Description": "The EC2 instance target port used by the load balancer",
            "Default": "80"
        }
    },
    "Conditions": {
        "NeedsAuthVpcPeering": {
            "Fn::Not": [{
                "Fn::Equals": [{
                    "Ref": "AuthenticationVPCPeeringConnectionId"
                }, ""]
            }]
        }
    },
    "Resources": {
        "subnet1a" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : "https://s3-eu-west-1.amazonaws.com/cloudformations-een-shared/een-v1/develop/application/resource-groups/subnets/private.json",
                "TimeoutInMinutes" : "60",
                "Parameters": {
                    "ProjectName": { "Ref" : "ProjectName" },
                    "EnvironmentName": { "Ref" : "EnvironmentName" },
                    "ApplicationEnv": { "Ref" : "ApplicationEnv" },
                    "VpcId": { "Ref" : "VpcId" },
                    "ManagementVPCPeeringConnectionId": { "Ref" : "ManagementVPCPeeringConnectionId" },
                    "AuthenticationVPCPeeringConnectionId": { "Ref" : "AuthenticationVPCPeeringConnectionId" },
                    "AuthenticationVPCPeeringConnectionCidrBlock": { "Ref" : "AuthenticationVPCPeeringConnectionCidrBlock" },
                    "LayerName": { "Ref" : "LayerName" },
                    "CidrBlock": { "Fn::Join": ["",[ { "Ref": "vpcCidrPrefix" }, { "Ref" : "Subnet1aCidrBlock" } ]] },
                    "AvailabilityZone": "eu-west-1a",
                    "Name": "subnet1a",
                    "NatGatewayId" : { "Ref" : "Subnet1NatGatewayAId" }
                }
            }
        },
        "subnet1b" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : "https://s3-eu-west-1.amazonaws.com/cloudformations-een-shared/een-v1/develop/application/resource-groups/subnets/private.json",
                "TimeoutInMinutes" : "60",
                "Parameters": {
                    "ProjectName": { "Ref" : "ProjectName" },
                    "EnvironmentName": { "Ref" : "EnvironmentName" },
                    "ApplicationEnv": { "Ref" : "ApplicationEnv" },
                    "VpcId": { "Ref" : "VpcId" },
                    "ManagementVPCPeeringConnectionId": { "Ref" : "ManagementVPCPeeringConnectionId" },
                    "AuthenticationVPCPeeringConnectionId": { "Ref" : "AuthenticationVPCPeeringConnectionId" },
                    "AuthenticationVPCPeeringConnectionCidrBlock": { "Ref" : "AuthenticationVPCPeeringConnectionCidrBlock" },
                    "LayerName": { "Ref" : "LayerName" },
                    "CidrBlock": { "Fn::Join": ["",[ { "Ref": "vpcCidrPrefix" }, { "Ref" : "Subnet1bCidrBlock" } ]] },
                    "AvailabilityZone": "eu-west-1b",
                    "Name": "subnet1b",
                    "NatGatewayId" : { "Ref" : "Subnet1NatGatewayBId" }
                }
            }
        },
        "elb1" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : ["EC2SecurityGroup1", "EC2SecurityGroupLocal"],
            "Properties" : {
                "TemplateURL" : "https://s3-eu-west-1.amazonaws.com/cloudformations-een-shared/een-v1/develop/application/resource-groups/elbs/private.json",
                "TimeoutInMinutes" : "60",
                "Parameters": {
                    "ProjectName": { "Ref" : "ProjectName" },
                    "EnvironmentName": { "Ref" : "EnvironmentName" },
                    "ApplicationEnv": { "Ref" : "ApplicationEnv" },
                    "VpcId": { "Ref" : "VpcId" },
                    "LayerName": { "Ref" : "LayerName" },
                    "SubnetCidrBlock": { "Fn::Join": ["",[ { "Ref": "vpcCidrPrefix" }, { "Ref" : "Subnet1CidrBlock" } ]] },
                    "SubnetAId" : { "Fn::GetAtt" : [ "subnet1a", "Outputs.SubnetId" ] },
                    "SubnetBId" : { "Fn::GetAtt" : [ "subnet1b", "Outputs.SubnetId" ] },
                    "SubnetName": "subnet1",
                    "S3BucketLoggingName" : { "Ref" : "S3BucketLoggingName" },
                    "EC2KeyName": { "Ref" : "EC2KeyName" },
                    "EC2InstanceAmi": { "Ref" : "Subnet1EC2InstanceAmi" },
                    "EC2InstanceType": { "Ref" : "Subnet1EC2InstanceType" },
                    "EC2AutoScaleGroupSizeMin": { "Ref" : "Subnet1EC2AutoScaleGroupSizeMin" },
                    "EC2AutoScaleGroupSizeMax": { "Ref" : "Subnet1EC2AutoScaleGroupSizeMax" },
                    "EC2AutoScaleNotificationTopicArn": { "Ref" : "Subnet1EC2AutoScaleNotificationTopicArn" },
                    "EC2InstancePort": { "Ref" : "EC2InstancePort" },
                    "EC2SecurityGroupIds": {
                        "Fn::Join": [
                            ",",
                            [
                              { "Ref": "EC2SecurityGroupManagementVpcId" },
                              { "Ref": "EC2SecurityGroup1" },
                              { "Ref": "EC2SecurityGroupLocal" }
                            ]
                        ]
                    },
                    "ELBSecurityGroupIds": {
                        "Fn::Join": [
                            ",",
                            [
                                { "Ref": "EC2SecurityGroupManagementVpcId" },
                                { "Ref": "EC2SecurityGroup1" },
                                {
                                    "Fn::If": [
                                        "NeedsAuthVpcPeering",
                                        {
                                            "Ref": "EC2SecurityGroupAuthenticationProxy"
                                        },
                                        {
                                            "Ref": "AWS::NoValue"
                                        }
                                    ]
                                }
                            ]
                        ]
                    }
                }
            }
        },
        "RecordSetGroup1": {
            "Type": "AWS::Route53::RecordSetGroup",
            "DependsOn" : "elb1",
            "Properties": {
                "HostedZoneId": {
                        "Ref": "PrivateHostedZoneID"
                    },
                "Comment": "Layer2 ELB A record",
                "RecordSets": [{
                        "Name": {
                            "Fn::Join": [".", [
                                    "elb",
                                    "subnet1",
                                    {
                                        "Ref": "LayerName"
                                    },
                                    {
                                        "Ref": "EnvironmentName"
                                    },
                                    {
                                        "Ref": "ProjectName"
                                    },
                                    "gov.uk"]]
                        },
                        "Type": "A",
                        "AliasTarget": {
                            "HostedZoneId": {
                                "Fn::GetAtt" : [ "elb1", "Outputs.HostedZoneId" ]
                            },
                            "DNSName": {
                                "Fn::GetAtt" : [ "elb1", "Outputs.DNSName" ]
                            }
                        }
                    }
                ]
            }
        },
        "EC2SecurityGroup1": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ICMP/HTTPS access from IngressCidrBlock1 specified",
                "SecurityGroupIngress": [
                  {
                    "IpProtocol": "tcp",
                    "FromPort": "443",
                    "ToPort": "443",
                    "CidrIp": { "Fn::Join": ["",[ { "Ref": "vpcCidrPrefix" }, { "Ref" : "Subnet1IngressCidrBlock1" } ]] }
                  },
                  {
                    "IpProtocol": "icmp",
                    "FromPort": "-1",
                    "ToPort": "-1",
                    "CidrIp": { "Fn::Join": ["",[ { "Ref": "vpcCidrPrefix" }, { "Ref" : "Subnet1IngressCidrBlock1" } ]] }
                  },
                  {
                    "IpProtocol": "tcp",
                    "FromPort": "22",
                    "ToPort": "22",
                    "CidrIp": { "Fn::Join": ["",[ { "Ref": "vpcCidrPrefix" }, { "Ref" : "Subnet1IngressCidrBlock1" } ]] }
                  }
                ],
                "VpcId": {
                  "Ref": "VpcId"
                }
            }
        },
        "EC2SecurityGroupLocal": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "TCP access from local subnet on EC2InstancePort specified",
                "SecurityGroupIngress": [
                  {
                    "IpProtocol": "tcp",
                    "FromPort": {
                      "Ref": "EC2InstancePort"
                    },
                    "ToPort": {
                      "Ref": "EC2InstancePort"
                    },
                    "CidrIp": {
                      "Fn::Join": ["",[ { "Ref": "vpcCidrPrefix" }, { "Ref" : "Subnet1CidrBlock" } ]]
                    }
                  }
                ],
                "VpcId": {
                  "Ref": "VpcId"
                }
            }
        },
        "EC2SecurityGroupPresentationConsumer": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ICMP and HTTPS access inbound from the presentation consumer layer",
                "SecurityGroupIngress": [
                  {
                    "IpProtocol": "icmp",
                    "FromPort": "-1",
                    "ToPort": "-1",
                    "CidrIp": {
                      "Fn::Join": ["",[ { "Ref": "vpcCidrPrefix" }, { "Ref" : "Subnet1CidrBlock" } ]]
                    }
                  },
                  {
                    "IpProtocol": "tcp",
                    "FromPort": "443",
                    "ToPort": "443",
                    "CidrIp": {
                      "Fn::Join": ["",[ { "Ref": "vpcCidrPrefix" }, { "Ref" : "Subnet1CidrBlock" } ]]
                    }
                  }
                ],
                "VpcId": {
                  "Ref": "VpcId"
                }
            }
        },
        "EC2SecurityGroupAuthenticationProxy": {
            "Type": "AWS::EC2::SecurityGroup",
            "Condition": "NeedsAuthVpcPeering",
            "Properties": {
                "GroupDescription": "ICMP and HTTPS access inbound from the authentication proxy stack",
                "SecurityGroupIngress": [
                  {
                    "IpProtocol": "icmp",
                    "FromPort": "-1",
                    "ToPort": "-1",
                    "CidrIp": {
                        "Ref" : "AuthenticationVPCPeeringConnectionCidrBlock"
                    }
                  },
                  {
                    "IpProtocol": "tcp",
                    "FromPort": "443",
                    "ToPort": "443",
                    "CidrIp": {
                        "Ref" : "AuthenticationVPCPeeringConnectionCidrBlock"
                    }
                  }
                ],
                "VpcId": {
                  "Ref": "VpcId"
                }
            }
        }
    },
    "Outputs": {
         "EC2SecurityGroupPresentationConsumerId": {
            "Description": "The ID of EC2SecurityGroupPresentationConsumer",
            "Value": {
                "Ref": "EC2SecurityGroupPresentationConsumer"
            }
        }
    }
}